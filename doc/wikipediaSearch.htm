<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
	<link rel="icon" type="image/ico" href="images/strus.ico" />
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="description" content="Documentation of the strus wikipedia search demo, a collection of C++ libraries for building a full-text search engine." />
	<meta name="keywords" content="wikipedia demo fulltext search engine C++" />
	<meta name="author" content="Patrick Frey &lt;patrickpfrey (a) yahoo (dt) com&gt;" />
	<link rel="stylesheet" type="text/css" href="text-profile.css" title="Text Profile" media="all" />
	<title>Strus Wikipedia search config</title>
</head>

<body>
<script type="text/javascript">
</script><div id="wrap">
	<div id="content">
		<h1>Formal aspects of the Wikipedia search project</h1>
		<p class="description"> This document describes the configuration of the Strus Wikipedia 
		demo search. It discusses the formal aspects of the project rather than describing
		the installation and running of the application. For a guide through the installation 
		and build up of this Wikipedia demo search please read <a href="./wikipediaSearchNuc.htm">Provide Wikipedia search on a NUC with Strus</a>.
		</p>
		<h2>Problems to solve</h2>
		<p class="description">This wikipedia demo search engine has been implemented
		to show the capabilities of <i>strus</i> to handle a non trivial document collection.
		The following problems have to be solved:
		<ol>
		<li><b>A non trivial collection size: </b>
		<p class="description">
		Wikipedia English contains about 11.5 Million documents of namespace 0 (tag 'ns' in the Wikimedia XML)
		of which about 5 million documents are articles. The rest are redirects due to renaming and 
		reorganization of the collecion.
		</p></li>
		<li><b>The variety of index features: </b>
		<p class="description">The wikipedia collection contains not only English words,
		but also a lot of foreigh words, names, numbers and identifiers without
		semantical meaning. Collections with a big variety of index terms are difficult
		to handle for an IR system, especially the insert performance tends to degrade.
		So Wikipedia turns out to be a good example collection when building a search engine,
		because real world problems have in general the nasty property of not beeing nice.
		</p></li>
		<li><b>The document format: </b>
		<p class="description">The Wikipedia documents can be downloaded as XML
		(https://dumps.wikimedia.org/enwiki/20141106/enwiki-20141106-pages-articles-multistream.xml.bz2).
		Unfortunately the content (XPath /page/revision/text) of these documents
		is not in XML but in the proprietry Wikimedia text format. With strus only XML can be
		handled till now. So a converter had to be written
		(I searched for a free one, but did not find one). My converter is based on some thumb rule 
		heuristics and therefore has many bugs. The code is also so awful that I do not dare to touch it
		anymore. I currently hope for a better solution in the future done by experts on the topic.
		</p></li>
		</ol>
		</p>
		<h2>Converting the Wikipedia data</h2>
		<p class="description"> For the conversion of the Wikimedia format in the dump XML,
		I wrote the program <i>strusWikimediaToXml</i>. The program is written
		in C++ as part of the <a href="https://github.com/patrickfrey/strusWikipediaSearch">strusWikipediaSearch project</a>.
		It takes a file or stdin as input and writes the pure XML content transformation
		to stdout. The following excerpt shows the transformation of some content 
		in /page/revision/text of the Wikipedia dump:</p>
		<pre>
Like early programming languages such as [[Fortran]], [[ALGOL|Algol]],
[[Cobol]] and [[Lisp (programming language)|Lisp]], assemblers have 
been available since the 1950s and the first generations of 
text based [[computer interface]]s.
		</pre>
		<p class="description">is converted to</p>
		<pre>
Like early programming languages such as &lt;link type="page" id="Fortran"&gt;Fortran&lt;/link&gt;
, &lt;link type="page" id="ALGOL"&gt;Algol&lt;/link&gt;
, &lt;link type="page" id="Cobol"&gt;Cobol&lt;/link&gt;
 and &lt;link type="page" id="Lisp (programming language)"&gt;Lisp&lt;/link&gt;
, assemblers have been available since the 1950s and the first generations
of text based &lt;link type="page" id="computer interface"&gt;computer interface&lt;/link&gt;
		</pre>
		<h2>The storage configuration</h2>
		<p class="description">The storage has the following
		elements in the meta data table:</p>
		<pre>
pageweight Float32     (tanh(x/50) where x are the number of references to that document)
doclen UInt16          (number of distinct term positions in the document)
minpos_title UInt8     (first position of the title)
maxpos_title UInt8     (last position of the title)
		</pre>
		<p class="description">The storage has been created with the program
		<a href="utilities.htm#strusCreate">strusCreate</a> and filled with
		the program <a href="utilities.htm#strusInsert">strusInsert</a>.
		It is important to know that these command line utilities are all
		implementing their functionality with <a href="http://patrickfrey.github.io/strus/doc/doxygen/html/index.html">
		the Strus core API</a> and the <a href="http://patrickfrey.github.io/strusAnalyzer/doc/doxygen/html/index.html">
		Strus analyzer API</a>. There is no parallel universe involved and you are not dependent
		on the command line tools in anyways. They are handy though.
		</p>

		<h2>The analyzer configuration</h2>
		<p class="description">
		The file config/wikipedia.ana is the configuration of the analyzer as required by
		the program strusInsert. You can find the grammar of the analyzer
		configuration language <a href="grammar_analyzerprg_doc.htm">here (analyzer configuration language)</a>.
		</p>
		<input class="toggle-box" id="analyzercfg" type="checkbox" >
		<label for="analyzercfg">config/wikipedia.ana</label>
		<pre>
[Attribute]
    docid = text content /mediawiki/page/title();
    date = text content /mediawiki/page/revision/timestamp();
    contributor = text content /mediawiki/page/revision/contributor/username();

[SearchIndex]
    start = empty content /mediawiki/page/revision/text;

    para = empty content /mediawiki/page/revision/text/h1;
    para = empty content /mediawiki/page/revision/text/h2;
    para = empty content /mediawiki/page/revision/text/h3;

    tist = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/title();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/title();

    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/i();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/b();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l1();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l2();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l3();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l4();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/link/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/wwwlink();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l1/link/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l1/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l1/wwwlink();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l2/link/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l2/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l2/wwwlink();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l3/link/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l3/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l3/wwwlink();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l4/link/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l4/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/l4/wwwlink();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ol/li();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ol/li/i();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ol/li/b();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ol/li/link/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ol/li/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ol/li/wwwlink();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ul/li();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ul/li/i();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ul/li/b();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ul/li/link/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ul/li/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/ul/li/wwwlink();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/table/tr/td();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/table/tr/td/i();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/table/tr/td/b();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/table/tr/td/link/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/table/tr/td/link[@type='page']();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/table/tr/td/wwwlink();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/h1();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/h2();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/h3();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/h4();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/h5();
    stem = lc:convdia(en):stem(en):dictmap("irregular_verbs_en.txt"):lc content_europe_inv /mediawiki/page/revision/text/h6();

    sent = empty punctuation(en,".") /mediawiki/page/revision/text();
    sent = empty content /mediawiki/page/revision/text/l1~;
    sent = empty content /mediawiki/page/revision/text/l2~;
    sent = empty content /mediawiki/page/revision/text/l3~;
    sent = empty content /mediawiki/page/revision/text/l4~;
    sent = empty content /mediawiki/page/revision/text/h1~;
    sent = empty content /mediawiki/page/revision/text/h2~;
    sent = empty content /mediawiki/page/revision/text/h3~;
    sent = empty content /mediawiki/page/revision/text/h4~;
    sent = empty content /mediawiki/page/revision/text/h5~;
    sent = empty content /mediawiki/page/revision/text/h6~;
    sent = empty content /mediawiki/page/revision/text//link[@type='file']~;
    sent = empty content /mediawiki/page/revision/text//link[@type='image']~;
    sent = empty content /mediawiki/page/revision/text//link[@type='category']~;
    sent = empty content /mediawiki/page/revision/text//li~;
    sent = empty content /mediawiki/page/revision/text//td~;

    linkvar = empty content /mediawiki/page/revision/text//link[@type='page']@id;
    catgvar = empty content /mediawiki/page/revision/text//link[@type='category']@id;
    wwwvar = empty content /mediawiki/page/revision/text//wwwlink@id;

[ForwardIndex]
    linkid  = lc:text content /mediawiki/page/revision/text//link[@type='page']@id;
    catgid  = lc:text content /mediawiki/page/revision/text//link[@type='category']@id;

    orig = text split /mediawiki/page/title();
    orig = text split /mediawiki/page/revision/text/h1();
    orig = text split /mediawiki/page/revision/text/h2();
    orig = text split /mediawiki/page/revision/text/h3();
    orig = text split /mediawiki/page/revision/text/h4();
    orig = text split /mediawiki/page/revision/text/h5();
    orig = text split /mediawiki/page/revision/text/h6();

    orig = text content_europe_fwd /mediawiki/page/revision/text();
    orig = text content_europe_fwd /mediawiki/page/revision/text/i();
    orig = text content_europe_fwd /mediawiki/page/revision/text/b();
    orig = text split /mediawiki/page/revision/text/l1();
    orig = text split /mediawiki/page/revision/text/l2();
    orig = text split /mediawiki/page/revision/text/l3();
    orig = text split /mediawiki/page/revision/text/l4();
    orig = text content_europe_fwd /mediawiki/page/revision/text/link/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/wwwlink();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l1/link/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l1/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l1/wwwlink();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l2/link/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l2/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l2/wwwlink();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l3/link/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l3/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l3/wwwlink();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l4/link/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l4/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/l4/wwwlink();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ol/li();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ol/li/i();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ol/li/b();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ol/li/link/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ol/li/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ol/li/wwwlink();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ul/li();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ul/li/i();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ul/li/b();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ul/li/link/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ul/li/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/ul/li/wwwlink();
    orig = text content_europe_fwd /mediawiki/page/revision/text/table/tr/td();
    orig = text content_europe_fwd /mediawiki/page/revision/text/table/tr/td/i();
    orig = text content_europe_fwd /mediawiki/page/revision/text/table/tr/td/b();
    orig = text content_europe_fwd /mediawiki/page/revision/text/table/tr/td/link/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/table/tr/td/link[@type='page']();
    orig = text content_europe_fwd /mediawiki/page/revision/text/table/tr/td/wwwlink();

    wwwlnk = text content /mediawiki/page/revision/text//wwwlink@id;

[Document]
    doc = /mediawiki/page;

[Aggregator]
    minpos_title = minpos( tist);
    maxpos_title = maxpos( tist);
    doclen = count( stem);
		</pre>

		<h2>Weighting schemas implemented</h2>
		<p class="description"><b>BM25</b>: Classical BM25 with k1=1.2, b=0.75, avgdoclen=500
		</p>
		<p class="description"><b>BM25pff (BM25 with proximity)</b>: BM25 with some ff penalties for missing proximity requirements.
		<br/>I know that implementing an retrieval scheme on my own like with BM25pff
		is a shaky ground. There are a lot of attempts to combine BM25 with aspects of proximity.
		I have read some of the papers. I would like to decide for a standard retrieval scheme of 
		this kind that has more evidence to work than my rule of thumb scheme <i>BM25pff</i>.
		Suggestions are welcome.
		</p>
		<p class="description"><b>NBLNK</b>: Extract links weighted according their appearance in sentences that contain configurations of query terms. 
		The documents inspected are the best 100 documents of each storage node evaluated with BM25
		on documents containing all query terms. The weighting of the links is done by accumulating 
		weights of feature expressions build from pairs of query terms
		(or one term in case of a single term query).
		</p>
		<p class="description">
		For both BM25 and BM25pff there is an extra weight added representing link popularity: w=tanh(n/50), 
		where n is the number of links pointing to the page (df of references). 
		All query evaluation schemes rank only documents that contain all query terms.
		There is no spelling correction mechanism implemented.
		</p>
		<p class="description">
		For any query that consists only of very high frequent words (so called stop words in IR),
		a restriction is made on documents that contain a subset of the query term in the title.
		This is done to avoid big scans on documents that raise query answering time by factors
		compared with an ordinary query.
		</p>
</div>
</body>
</html>

